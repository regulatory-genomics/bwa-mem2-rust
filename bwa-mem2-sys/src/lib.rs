/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const BWA_IDX_ALL: u32 = 7;
pub const MEM_F_PE: u32 = 2;
pub const MEM_F_NOPAIRING: u32 = 4;
pub const MEM_F_ALL: u32 = 8;
pub const MEM_F_NO_MULTI: u32 = 16;
pub const MEM_F_NO_RESCUE: u32 = 32;
pub const MEM_F_REF_HDR: u32 = 256;
pub const MEM_F_SOFTCLIP: u32 = 512;
pub const MEM_F_SMARTPE: u32 = 1024;
pub const MEM_F_PRIMARY5: u32 = 2048;
pub const MEM_F_KEEP_SUPP_MAPQ: u32 = 4096;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_flags2"][::std::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::__pad5"][::std::mem::offset_of!(_IO_FILE, __pad5) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bntann1_t {
    pub offset: i64,
    pub len: i32,
    pub n_ambs: i32,
    pub gi: u32,
    pub is_alt: i32,
    pub name: *mut ::std::os::raw::c_char,
    pub anno: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bntann1_t"][::std::mem::size_of::<bntann1_t>() - 40usize];
    ["Alignment of bntann1_t"][::std::mem::align_of::<bntann1_t>() - 8usize];
    ["Offset of field: bntann1_t::offset"][::std::mem::offset_of!(bntann1_t, offset) - 0usize];
    ["Offset of field: bntann1_t::len"][::std::mem::offset_of!(bntann1_t, len) - 8usize];
    ["Offset of field: bntann1_t::n_ambs"][::std::mem::offset_of!(bntann1_t, n_ambs) - 12usize];
    ["Offset of field: bntann1_t::gi"][::std::mem::offset_of!(bntann1_t, gi) - 16usize];
    ["Offset of field: bntann1_t::is_alt"][::std::mem::offset_of!(bntann1_t, is_alt) - 20usize];
    ["Offset of field: bntann1_t::name"][::std::mem::offset_of!(bntann1_t, name) - 24usize];
    ["Offset of field: bntann1_t::anno"][::std::mem::offset_of!(bntann1_t, anno) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bntamb1_t {
    pub offset: i64,
    pub len: i32,
    pub amb: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bntamb1_t"][::std::mem::size_of::<bntamb1_t>() - 16usize];
    ["Alignment of bntamb1_t"][::std::mem::align_of::<bntamb1_t>() - 8usize];
    ["Offset of field: bntamb1_t::offset"][::std::mem::offset_of!(bntamb1_t, offset) - 0usize];
    ["Offset of field: bntamb1_t::len"][::std::mem::offset_of!(bntamb1_t, len) - 8usize];
    ["Offset of field: bntamb1_t::amb"][::std::mem::offset_of!(bntamb1_t, amb) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bntseq_t {
    pub l_pac: i64,
    pub n_seqs: i32,
    pub seed: u32,
    pub anns: *mut bntann1_t,
    pub n_holes: i32,
    pub ambs: *mut bntamb1_t,
    pub fp_pac: *mut FILE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bntseq_t"][::std::mem::size_of::<bntseq_t>() - 48usize];
    ["Alignment of bntseq_t"][::std::mem::align_of::<bntseq_t>() - 8usize];
    ["Offset of field: bntseq_t::l_pac"][::std::mem::offset_of!(bntseq_t, l_pac) - 0usize];
    ["Offset of field: bntseq_t::n_seqs"][::std::mem::offset_of!(bntseq_t, n_seqs) - 8usize];
    ["Offset of field: bntseq_t::seed"][::std::mem::offset_of!(bntseq_t, seed) - 12usize];
    ["Offset of field: bntseq_t::anns"][::std::mem::offset_of!(bntseq_t, anns) - 16usize];
    ["Offset of field: bntseq_t::n_holes"][::std::mem::offset_of!(bntseq_t, n_holes) - 24usize];
    ["Offset of field: bntseq_t::ambs"][::std::mem::offset_of!(bntseq_t, ambs) - 32usize];
    ["Offset of field: bntseq_t::fp_pac"][::std::mem::offset_of!(bntseq_t, fp_pac) - 40usize];
};
pub type bwtint_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bwt_t {
    pub primary: bwtint_t,
    pub L2: [bwtint_t; 5usize],
    pub seq_len: bwtint_t,
    pub bwt_size: bwtint_t,
    pub bwt: *mut u32,
    pub cnt_table: [u32; 256usize],
    pub sa_intv: ::std::os::raw::c_int,
    pub n_sa: bwtint_t,
    pub sa: *mut bwtint_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bwt_t"][::std::mem::size_of::<bwt_t>() - 1120usize];
    ["Alignment of bwt_t"][::std::mem::align_of::<bwt_t>() - 8usize];
    ["Offset of field: bwt_t::primary"][::std::mem::offset_of!(bwt_t, primary) - 0usize];
    ["Offset of field: bwt_t::L2"][::std::mem::offset_of!(bwt_t, L2) - 8usize];
    ["Offset of field: bwt_t::seq_len"][::std::mem::offset_of!(bwt_t, seq_len) - 48usize];
    ["Offset of field: bwt_t::bwt_size"][::std::mem::offset_of!(bwt_t, bwt_size) - 56usize];
    ["Offset of field: bwt_t::bwt"][::std::mem::offset_of!(bwt_t, bwt) - 64usize];
    ["Offset of field: bwt_t::cnt_table"][::std::mem::offset_of!(bwt_t, cnt_table) - 72usize];
    ["Offset of field: bwt_t::sa_intv"][::std::mem::offset_of!(bwt_t, sa_intv) - 1096usize];
    ["Offset of field: bwt_t::n_sa"][::std::mem::offset_of!(bwt_t, n_sa) - 1104usize];
    ["Offset of field: bwt_t::sa"][::std::mem::offset_of!(bwt_t, sa) - 1112usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bwtintv_t {
    pub x: [bwtint_t; 3usize],
    pub info: bwtint_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bwtintv_t"][::std::mem::size_of::<bwtintv_t>() - 32usize];
    ["Alignment of bwtintv_t"][::std::mem::align_of::<bwtintv_t>() - 8usize];
    ["Offset of field: bwtintv_t::x"][::std::mem::offset_of!(bwtintv_t, x) - 0usize];
    ["Offset of field: bwtintv_t::info"][::std::mem::offset_of!(bwtintv_t, info) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bwtintv_v {
    pub n: usize,
    pub m: usize,
    pub a: *mut bwtintv_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bwtintv_v"][::std::mem::size_of::<bwtintv_v>() - 24usize];
    ["Alignment of bwtintv_v"][::std::mem::align_of::<bwtintv_v>() - 8usize];
    ["Offset of field: bwtintv_v::n"][::std::mem::offset_of!(bwtintv_v, n) - 0usize];
    ["Offset of field: bwtintv_v::m"][::std::mem::offset_of!(bwtintv_v, m) - 8usize];
    ["Offset of field: bwtintv_v::a"][::std::mem::offset_of!(bwtintv_v, a) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bwaidx_t {
    pub bwt: *mut bwt_t,
    pub bns: *mut bntseq_t,
    pub pac: *mut u8,
    pub is_shm: ::std::os::raw::c_int,
    pub l_mem: i64,
    pub mem: *mut u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bwaidx_t"][::std::mem::size_of::<bwaidx_t>() - 48usize];
    ["Alignment of bwaidx_t"][::std::mem::align_of::<bwaidx_t>() - 8usize];
    ["Offset of field: bwaidx_t::bwt"][::std::mem::offset_of!(bwaidx_t, bwt) - 0usize];
    ["Offset of field: bwaidx_t::bns"][::std::mem::offset_of!(bwaidx_t, bns) - 8usize];
    ["Offset of field: bwaidx_t::pac"][::std::mem::offset_of!(bwaidx_t, pac) - 16usize];
    ["Offset of field: bwaidx_t::is_shm"][::std::mem::offset_of!(bwaidx_t, is_shm) - 24usize];
    ["Offset of field: bwaidx_t::l_mem"][::std::mem::offset_of!(bwaidx_t, l_mem) - 32usize];
    ["Offset of field: bwaidx_t::mem"][::std::mem::offset_of!(bwaidx_t, mem) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bseq1_t {
    pub l_seq: ::std::os::raw::c_int,
    pub id: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub comment: *mut ::std::os::raw::c_char,
    pub seq: *mut ::std::os::raw::c_char,
    pub qual: *mut ::std::os::raw::c_char,
    pub sam: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bseq1_t"][::std::mem::size_of::<bseq1_t>() - 48usize];
    ["Alignment of bseq1_t"][::std::mem::align_of::<bseq1_t>() - 8usize];
    ["Offset of field: bseq1_t::l_seq"][::std::mem::offset_of!(bseq1_t, l_seq) - 0usize];
    ["Offset of field: bseq1_t::id"][::std::mem::offset_of!(bseq1_t, id) - 4usize];
    ["Offset of field: bseq1_t::name"][::std::mem::offset_of!(bseq1_t, name) - 8usize];
    ["Offset of field: bseq1_t::comment"][::std::mem::offset_of!(bseq1_t, comment) - 16usize];
    ["Offset of field: bseq1_t::seq"][::std::mem::offset_of!(bseq1_t, seq) - 24usize];
    ["Offset of field: bseq1_t::qual"][::std::mem::offset_of!(bseq1_t, qual) - 32usize];
    ["Offset of field: bseq1_t::sam"][::std::mem::offset_of!(bseq1_t, sam) - 40usize];
};
extern "C" {
    pub static mut bwa_verbose: ::std::os::raw::c_int;
}
extern "C" {
    pub fn bwa_fill_scmat(a: ::std::os::raw::c_int, b: ::std::os::raw::c_int, mat: *mut i8);
}
extern "C" {
    pub fn bwa_idx_build(
        fa: *const ::std::os::raw::c_char,
        prefix: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bwa_idx_load(
        hint: *const ::std::os::raw::c_char,
        which: ::std::os::raw::c_int,
    ) -> *mut bwaidx_t;
}
extern "C" {
    pub fn bwa_idx_destroy(idx: *mut bwaidx_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dnaSeqPair {
    pub idr: i32,
    pub idq: i32,
    pub id: i32,
    pub len1: i32,
    pub len2: i32,
    pub h0: i32,
    pub seqid: ::std::os::raw::c_int,
    pub regid: ::std::os::raw::c_int,
    pub score: i32,
    pub tle: i32,
    pub gtle: i32,
    pub qle: i32,
    pub gscore: i32,
    pub max_off: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dnaSeqPair"][::std::mem::size_of::<dnaSeqPair>() - 56usize];
    ["Alignment of dnaSeqPair"][::std::mem::align_of::<dnaSeqPair>() - 4usize];
    ["Offset of field: dnaSeqPair::idr"][::std::mem::offset_of!(dnaSeqPair, idr) - 0usize];
    ["Offset of field: dnaSeqPair::idq"][::std::mem::offset_of!(dnaSeqPair, idq) - 4usize];
    ["Offset of field: dnaSeqPair::id"][::std::mem::offset_of!(dnaSeqPair, id) - 8usize];
    ["Offset of field: dnaSeqPair::len1"][::std::mem::offset_of!(dnaSeqPair, len1) - 12usize];
    ["Offset of field: dnaSeqPair::len2"][::std::mem::offset_of!(dnaSeqPair, len2) - 16usize];
    ["Offset of field: dnaSeqPair::h0"][::std::mem::offset_of!(dnaSeqPair, h0) - 20usize];
    ["Offset of field: dnaSeqPair::seqid"][::std::mem::offset_of!(dnaSeqPair, seqid) - 24usize];
    ["Offset of field: dnaSeqPair::regid"][::std::mem::offset_of!(dnaSeqPair, regid) - 28usize];
    ["Offset of field: dnaSeqPair::score"][::std::mem::offset_of!(dnaSeqPair, score) - 32usize];
    ["Offset of field: dnaSeqPair::tle"][::std::mem::offset_of!(dnaSeqPair, tle) - 36usize];
    ["Offset of field: dnaSeqPair::gtle"][::std::mem::offset_of!(dnaSeqPair, gtle) - 40usize];
    ["Offset of field: dnaSeqPair::qle"][::std::mem::offset_of!(dnaSeqPair, qle) - 44usize];
    ["Offset of field: dnaSeqPair::gscore"][::std::mem::offset_of!(dnaSeqPair, gscore) - 48usize];
    ["Offset of field: dnaSeqPair::max_off"][::std::mem::offset_of!(dnaSeqPair, max_off) - 52usize];
};
pub type SeqPair = dnaSeqPair;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bwaidx_fm_t {
    pub bns: *mut bntseq_t,
    pub pac: *mut u8,
    pub is_shm: ::std::os::raw::c_int,
    pub l_mem: i64,
    pub mem: *mut u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bwaidx_fm_t"][::std::mem::size_of::<bwaidx_fm_t>() - 40usize];
    ["Alignment of bwaidx_fm_t"][::std::mem::align_of::<bwaidx_fm_t>() - 8usize];
    ["Offset of field: bwaidx_fm_t::bns"][::std::mem::offset_of!(bwaidx_fm_t, bns) - 0usize];
    ["Offset of field: bwaidx_fm_t::pac"][::std::mem::offset_of!(bwaidx_fm_t, pac) - 8usize];
    ["Offset of field: bwaidx_fm_t::is_shm"][::std::mem::offset_of!(bwaidx_fm_t, is_shm) - 16usize];
    ["Offset of field: bwaidx_fm_t::l_mem"][::std::mem::offset_of!(bwaidx_fm_t, l_mem) - 24usize];
    ["Offset of field: bwaidx_fm_t::mem"][::std::mem::offset_of!(bwaidx_fm_t, mem) - 32usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct indexEle {
    pub idx: *mut bwaidx_fm_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of indexEle"][::std::mem::size_of::<indexEle>() - 8usize];
    ["Alignment of indexEle"][::std::mem::align_of::<indexEle>() - 8usize];
    ["Offset of field: indexEle::idx"][::std::mem::offset_of!(indexEle, idx) - 0usize];
};
extern "C" {
    #[link_name = "\u{1}_ZN8indexEle16bwa_idx_load_eleEPKci"]
    pub fn indexEle_bwa_idx_load_ele(
        this: *mut indexEle,
        hint: *const ::std::os::raw::c_char,
        which: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN8indexEle20bwa_idx_infer_prefixEPKc"]
    pub fn indexEle_bwa_idx_infer_prefix(
        this: *mut indexEle,
        hint: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN8indexEleC1Ev"]
    pub fn indexEle_indexEle(this: *mut indexEle);
}
extern "C" {
    #[link_name = "\u{1}_ZN8indexEleD1Ev"]
    pub fn indexEle_indexEle_destructor(this: *mut indexEle);
}
impl indexEle {
    #[inline]
    pub unsafe fn bwa_idx_load_ele(
        &mut self,
        hint: *const ::std::os::raw::c_char,
        which: ::std::os::raw::c_int,
    ) {
        indexEle_bwa_idx_load_ele(self, hint, which)
    }
    #[inline]
    pub unsafe fn bwa_idx_infer_prefix(
        &mut self,
        hint: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        indexEle_bwa_idx_infer_prefix(self, hint)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        indexEle_indexEle(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        indexEle_indexEle_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct checkpoint_occ_scalar {
    pub cp_count: [i64; 4usize],
    pub one_hot_bwt_str: [u64; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of checkpoint_occ_scalar"][::std::mem::size_of::<checkpoint_occ_scalar>() - 64usize];
    ["Alignment of checkpoint_occ_scalar"]
        [::std::mem::align_of::<checkpoint_occ_scalar>() - 8usize];
    ["Offset of field: checkpoint_occ_scalar::cp_count"]
        [::std::mem::offset_of!(checkpoint_occ_scalar, cp_count) - 0usize];
    ["Offset of field: checkpoint_occ_scalar::one_hot_bwt_str"]
        [::std::mem::offset_of!(checkpoint_occ_scalar, one_hot_bwt_str) - 32usize];
};
pub type CP_OCC = checkpoint_occ_scalar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct smem_struct {
    pub rid: u32,
    pub m: u32,
    pub n: u32,
    pub k: i64,
    pub l: i64,
    pub s: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of smem_struct"][::std::mem::size_of::<smem_struct>() - 40usize];
    ["Alignment of smem_struct"][::std::mem::align_of::<smem_struct>() - 8usize];
    ["Offset of field: smem_struct::rid"][::std::mem::offset_of!(smem_struct, rid) - 0usize];
    ["Offset of field: smem_struct::m"][::std::mem::offset_of!(smem_struct, m) - 4usize];
    ["Offset of field: smem_struct::n"][::std::mem::offset_of!(smem_struct, n) - 8usize];
    ["Offset of field: smem_struct::k"][::std::mem::offset_of!(smem_struct, k) - 16usize];
    ["Offset of field: smem_struct::l"][::std::mem::offset_of!(smem_struct, l) - 24usize];
    ["Offset of field: smem_struct::s"][::std::mem::offset_of!(smem_struct, s) - 32usize];
};
pub type SMEM = smem_struct;
#[repr(C)]
#[derive(Debug)]
pub struct FMI_search {
    pub _base: indexEle,
    pub reference_seq_len: i64,
    pub sentinel_index: i64,
    pub file_name: [::std::os::raw::c_char; 4096usize],
    pub index_alloc: i64,
    pub count: [i64; 5usize],
    pub sa_ls_word: *mut u32,
    pub sa_ms_byte: *mut i8,
    pub cp_occ: *mut CP_OCC,
    pub one_hot_mask_array: *mut u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FMI_search"][::std::mem::size_of::<FMI_search>() - 4200usize];
    ["Alignment of FMI_search"][::std::mem::align_of::<FMI_search>() - 8usize];
    ["Offset of field: FMI_search::reference_seq_len"]
        [::std::mem::offset_of!(FMI_search, reference_seq_len) - 8usize];
    ["Offset of field: FMI_search::sentinel_index"]
        [::std::mem::offset_of!(FMI_search, sentinel_index) - 16usize];
    ["Offset of field: FMI_search::file_name"]
        [::std::mem::offset_of!(FMI_search, file_name) - 24usize];
    ["Offset of field: FMI_search::index_alloc"]
        [::std::mem::offset_of!(FMI_search, index_alloc) - 4120usize];
    ["Offset of field: FMI_search::count"][::std::mem::offset_of!(FMI_search, count) - 4128usize];
    ["Offset of field: FMI_search::sa_ls_word"]
        [::std::mem::offset_of!(FMI_search, sa_ls_word) - 4168usize];
    ["Offset of field: FMI_search::sa_ms_byte"]
        [::std::mem::offset_of!(FMI_search, sa_ms_byte) - 4176usize];
    ["Offset of field: FMI_search::cp_occ"][::std::mem::offset_of!(FMI_search, cp_occ) - 4184usize];
    ["Offset of field: FMI_search::one_hot_mask_array"]
        [::std::mem::offset_of!(FMI_search, one_hot_mask_array) - 4192usize];
};
extern "C" {
    #[link_name = "\u{1}_ZN10FMI_search11build_indexEv"]
    pub fn FMI_search_build_index(this: *mut FMI_search) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN10FMI_search10load_indexEv"]
    pub fn FMI_search_load_index(this: *mut FMI_search);
}
extern "C" {
    #[link_name = "\u{1}_ZN10FMI_search8getSMEMsEPhiiiiiP11smem_structPl"]
    pub fn FMI_search_getSMEMs(
        this: *mut FMI_search,
        enc_qdb: *mut u8,
        numReads: i32,
        batch_size: i32,
        readlength: i32,
        minSeedLengh: i32,
        numthreads: i32,
        matchArray: *mut SMEM,
        numTotalSmem: *mut i64,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10FMI_search23getSMEMsOnePosOneThreadEPhPsPiS2_iiPK7bseq1_tS2_iiP11smem_structPl"]
    pub fn FMI_search_getSMEMsOnePosOneThread(
        this: *mut FMI_search,
        enc_qdb: *mut u8,
        query_pos_array: *mut i16,
        min_intv_array: *mut i32,
        rid_array: *mut i32,
        numReads: i32,
        batch_size: i32,
        seq_: *const bseq1_t,
        query_cum_len_ar: *mut i32,
        max_readlength: i32,
        minSeedLen: i32,
        matchArray: *mut SMEM,
        __numTotalSmem: *mut i64,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10FMI_search23getSMEMsAllPosOneThreadEPhPiS1_iiPK7bseq1_tS1_iiP11smem_structPl"]
    pub fn FMI_search_getSMEMsAllPosOneThread(
        this: *mut FMI_search,
        enc_qdb: *mut u8,
        min_intv_array: *mut i32,
        rid_array: *mut i32,
        numReads: i32,
        batch_size: i32,
        seq_: *const bseq1_t,
        query_cum_len_ar: *mut i32,
        max_readlength: i32,
        minSeedLen: i32,
        matchArray: *mut SMEM,
        __numTotalSmem: *mut i64,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10FMI_search30bwtSeedStrategyAllPosOneThreadEPhPiiPK7bseq1_tS1_iP11smem_struct"]
    pub fn FMI_search_bwtSeedStrategyAllPosOneThread(
        this: *mut FMI_search,
        enc_qdb: *mut u8,
        max_intv_array: *mut i32,
        numReads: i32,
        seq_: *const bseq1_t,
        query_cum_len_ar: *mut i32,
        minSeedLen: i32,
        matchArray: *mut SMEM,
    ) -> i64;
}
extern "C" {
    #[link_name = "\u{1}_ZN10FMI_search9sortSMEMsEP11smem_structPliii"]
    pub fn FMI_search_sortSMEMs(
        this: *mut FMI_search,
        matchArray: *mut SMEM,
        numTotalSmem: *mut i64,
        numReads: i32,
        readlength: i32,
        nthreads: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10FMI_search12get_sa_entryEl"]
    pub fn FMI_search_get_sa_entry(this: *mut FMI_search, pos: i64) -> i64;
}
extern "C" {
    #[link_name = "\u{1}_ZN10FMI_search14get_sa_entriesEPlS0_ji"]
    pub fn FMI_search_get_sa_entries(
        this: *mut FMI_search,
        posArray: *mut i64,
        coordArray: *mut i64,
        count: u32,
        nthreads: i32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10FMI_search14get_sa_entriesEP11smem_structPlPiji"]
    pub fn FMI_search_get_sa_entries1(
        this: *mut FMI_search,
        smemArray: *mut SMEM,
        coordArray: *mut i64,
        coordCountArray: *mut i32,
        count: u32,
        max_occ: i32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10FMI_search23get_sa_entry_compressedEli"]
    pub fn FMI_search_get_sa_entry_compressed(
        this: *mut FMI_search,
        pos: i64,
        tid: ::std::os::raw::c_int,
    ) -> i64;
}
extern "C" {
    #[link_name = "\u{1}_ZN10FMI_search14get_sa_entriesEP11smem_structPlPijii"]
    pub fn FMI_search_get_sa_entries2(
        this: *mut FMI_search,
        smemArray: *mut SMEM,
        coordArray: *mut i64,
        coordCountArray: *mut i32,
        count: u32,
        max_occ: i32,
        tid: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10FMI_search13call_one_stepElRlS0_"]
    pub fn FMI_search_call_one_step(
        this: *mut FMI_search,
        pos: i64,
        sa_entry: *mut i64,
        offset: *mut i64,
    ) -> i64;
}
extern "C" {
    #[link_name = "\u{1}_ZN10FMI_search23get_sa_entries_prefetchEP11smem_structPlS2_liiRl"]
    pub fn FMI_search_get_sa_entries_prefetch(
        this: *mut FMI_search,
        smemArray: *mut SMEM,
        coordArray: *mut i64,
        coordCountArray: *mut i64,
        count: i64,
        max_occ: i32,
        tid: ::std::os::raw::c_int,
        id_: *mut i64,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10FMI_searchC1EPKc"]
    pub fn FMI_search_FMI_search(this: *mut FMI_search, fname: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN10FMI_searchD1Ev"]
    pub fn FMI_search_FMI_search_destructor(this: *mut FMI_search);
}
impl FMI_search {
    #[inline]
    pub unsafe fn build_index(&mut self) -> ::std::os::raw::c_int {
        FMI_search_build_index(self)
    }
    #[inline]
    pub unsafe fn load_index(&mut self) {
        FMI_search_load_index(self)
    }
    #[inline]
    pub unsafe fn getSMEMs(
        &mut self,
        enc_qdb: *mut u8,
        numReads: i32,
        batch_size: i32,
        readlength: i32,
        minSeedLengh: i32,
        numthreads: i32,
        matchArray: *mut SMEM,
        numTotalSmem: *mut i64,
    ) {
        FMI_search_getSMEMs(
            self,
            enc_qdb,
            numReads,
            batch_size,
            readlength,
            minSeedLengh,
            numthreads,
            matchArray,
            numTotalSmem,
        )
    }
    #[inline]
    pub unsafe fn getSMEMsOnePosOneThread(
        &mut self,
        enc_qdb: *mut u8,
        query_pos_array: *mut i16,
        min_intv_array: *mut i32,
        rid_array: *mut i32,
        numReads: i32,
        batch_size: i32,
        seq_: *const bseq1_t,
        query_cum_len_ar: *mut i32,
        max_readlength: i32,
        minSeedLen: i32,
        matchArray: *mut SMEM,
        __numTotalSmem: *mut i64,
    ) {
        FMI_search_getSMEMsOnePosOneThread(
            self,
            enc_qdb,
            query_pos_array,
            min_intv_array,
            rid_array,
            numReads,
            batch_size,
            seq_,
            query_cum_len_ar,
            max_readlength,
            minSeedLen,
            matchArray,
            __numTotalSmem,
        )
    }
    #[inline]
    pub unsafe fn getSMEMsAllPosOneThread(
        &mut self,
        enc_qdb: *mut u8,
        min_intv_array: *mut i32,
        rid_array: *mut i32,
        numReads: i32,
        batch_size: i32,
        seq_: *const bseq1_t,
        query_cum_len_ar: *mut i32,
        max_readlength: i32,
        minSeedLen: i32,
        matchArray: *mut SMEM,
        __numTotalSmem: *mut i64,
    ) {
        FMI_search_getSMEMsAllPosOneThread(
            self,
            enc_qdb,
            min_intv_array,
            rid_array,
            numReads,
            batch_size,
            seq_,
            query_cum_len_ar,
            max_readlength,
            minSeedLen,
            matchArray,
            __numTotalSmem,
        )
    }
    #[inline]
    pub unsafe fn bwtSeedStrategyAllPosOneThread(
        &mut self,
        enc_qdb: *mut u8,
        max_intv_array: *mut i32,
        numReads: i32,
        seq_: *const bseq1_t,
        query_cum_len_ar: *mut i32,
        minSeedLen: i32,
        matchArray: *mut SMEM,
    ) -> i64 {
        FMI_search_bwtSeedStrategyAllPosOneThread(
            self,
            enc_qdb,
            max_intv_array,
            numReads,
            seq_,
            query_cum_len_ar,
            minSeedLen,
            matchArray,
        )
    }
    #[inline]
    pub unsafe fn sortSMEMs(
        &mut self,
        matchArray: *mut SMEM,
        numTotalSmem: *mut i64,
        numReads: i32,
        readlength: i32,
        nthreads: ::std::os::raw::c_int,
    ) {
        FMI_search_sortSMEMs(
            self,
            matchArray,
            numTotalSmem,
            numReads,
            readlength,
            nthreads,
        )
    }
    #[inline]
    pub unsafe fn get_sa_entry(&mut self, pos: i64) -> i64 {
        FMI_search_get_sa_entry(self, pos)
    }
    #[inline]
    pub unsafe fn get_sa_entries(
        &mut self,
        posArray: *mut i64,
        coordArray: *mut i64,
        count: u32,
        nthreads: i32,
    ) {
        FMI_search_get_sa_entries(self, posArray, coordArray, count, nthreads)
    }
    #[inline]
    pub unsafe fn get_sa_entries1(
        &mut self,
        smemArray: *mut SMEM,
        coordArray: *mut i64,
        coordCountArray: *mut i32,
        count: u32,
        max_occ: i32,
    ) {
        FMI_search_get_sa_entries1(self, smemArray, coordArray, coordCountArray, count, max_occ)
    }
    #[inline]
    pub unsafe fn get_sa_entry_compressed(&mut self, pos: i64, tid: ::std::os::raw::c_int) -> i64 {
        FMI_search_get_sa_entry_compressed(self, pos, tid)
    }
    #[inline]
    pub unsafe fn get_sa_entries2(
        &mut self,
        smemArray: *mut SMEM,
        coordArray: *mut i64,
        coordCountArray: *mut i32,
        count: u32,
        max_occ: i32,
        tid: ::std::os::raw::c_int,
    ) {
        FMI_search_get_sa_entries2(
            self,
            smemArray,
            coordArray,
            coordCountArray,
            count,
            max_occ,
            tid,
        )
    }
    #[inline]
    pub unsafe fn call_one_step(&mut self, pos: i64, sa_entry: *mut i64, offset: *mut i64) -> i64 {
        FMI_search_call_one_step(self, pos, sa_entry, offset)
    }
    #[inline]
    pub unsafe fn get_sa_entries_prefetch(
        &mut self,
        smemArray: *mut SMEM,
        coordArray: *mut i64,
        coordCountArray: *mut i64,
        count: i64,
        max_occ: i32,
        tid: ::std::os::raw::c_int,
        id_: *mut i64,
    ) {
        FMI_search_get_sa_entries_prefetch(
            self,
            smemArray,
            coordArray,
            coordCountArray,
            count,
            max_occ,
            tid,
            id_,
        )
    }
    #[inline]
    pub unsafe fn new(fname: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FMI_search_FMI_search(__bindgen_tmp.as_mut_ptr(), fname);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        FMI_search_FMI_search_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mem_opt_t {
    pub a: ::std::os::raw::c_int,
    pub b: ::std::os::raw::c_int,
    pub o_del: ::std::os::raw::c_int,
    pub e_del: ::std::os::raw::c_int,
    pub o_ins: ::std::os::raw::c_int,
    pub e_ins: ::std::os::raw::c_int,
    pub pen_unpaired: ::std::os::raw::c_int,
    pub pen_clip5: ::std::os::raw::c_int,
    pub pen_clip3: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub zdrop: ::std::os::raw::c_int,
    pub max_mem_intv: u64,
    pub T: ::std::os::raw::c_int,
    pub flag: ::std::os::raw::c_int,
    pub min_seed_len: ::std::os::raw::c_int,
    pub min_chain_weight: ::std::os::raw::c_int,
    pub max_chain_extend: ::std::os::raw::c_int,
    pub split_factor: f32,
    pub split_width: ::std::os::raw::c_int,
    pub max_occ: ::std::os::raw::c_int,
    pub max_chain_gap: ::std::os::raw::c_int,
    pub n_threads: ::std::os::raw::c_int,
    pub chunk_size: i64,
    pub mask_level: f32,
    pub drop_ratio: f32,
    pub XA_drop_ratio: f32,
    pub mask_level_redun: f32,
    pub mapQ_coef_len: f32,
    pub mapQ_coef_fac: ::std::os::raw::c_int,
    pub max_ins: ::std::os::raw::c_int,
    pub max_matesw: ::std::os::raw::c_int,
    pub max_XA_hits: ::std::os::raw::c_int,
    pub max_XA_hits_alt: ::std::os::raw::c_int,
    pub mat: [i8; 25usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mem_opt_t"][::std::mem::size_of::<mem_opt_t>() - 176usize];
    ["Alignment of mem_opt_t"][::std::mem::align_of::<mem_opt_t>() - 8usize];
    ["Offset of field: mem_opt_t::a"][::std::mem::offset_of!(mem_opt_t, a) - 0usize];
    ["Offset of field: mem_opt_t::b"][::std::mem::offset_of!(mem_opt_t, b) - 4usize];
    ["Offset of field: mem_opt_t::o_del"][::std::mem::offset_of!(mem_opt_t, o_del) - 8usize];
    ["Offset of field: mem_opt_t::e_del"][::std::mem::offset_of!(mem_opt_t, e_del) - 12usize];
    ["Offset of field: mem_opt_t::o_ins"][::std::mem::offset_of!(mem_opt_t, o_ins) - 16usize];
    ["Offset of field: mem_opt_t::e_ins"][::std::mem::offset_of!(mem_opt_t, e_ins) - 20usize];
    ["Offset of field: mem_opt_t::pen_unpaired"]
        [::std::mem::offset_of!(mem_opt_t, pen_unpaired) - 24usize];
    ["Offset of field: mem_opt_t::pen_clip5"]
        [::std::mem::offset_of!(mem_opt_t, pen_clip5) - 28usize];
    ["Offset of field: mem_opt_t::pen_clip3"]
        [::std::mem::offset_of!(mem_opt_t, pen_clip3) - 32usize];
    ["Offset of field: mem_opt_t::w"][::std::mem::offset_of!(mem_opt_t, w) - 36usize];
    ["Offset of field: mem_opt_t::zdrop"][::std::mem::offset_of!(mem_opt_t, zdrop) - 40usize];
    ["Offset of field: mem_opt_t::max_mem_intv"]
        [::std::mem::offset_of!(mem_opt_t, max_mem_intv) - 48usize];
    ["Offset of field: mem_opt_t::T"][::std::mem::offset_of!(mem_opt_t, T) - 56usize];
    ["Offset of field: mem_opt_t::flag"][::std::mem::offset_of!(mem_opt_t, flag) - 60usize];
    ["Offset of field: mem_opt_t::min_seed_len"]
        [::std::mem::offset_of!(mem_opt_t, min_seed_len) - 64usize];
    ["Offset of field: mem_opt_t::min_chain_weight"]
        [::std::mem::offset_of!(mem_opt_t, min_chain_weight) - 68usize];
    ["Offset of field: mem_opt_t::max_chain_extend"]
        [::std::mem::offset_of!(mem_opt_t, max_chain_extend) - 72usize];
    ["Offset of field: mem_opt_t::split_factor"]
        [::std::mem::offset_of!(mem_opt_t, split_factor) - 76usize];
    ["Offset of field: mem_opt_t::split_width"]
        [::std::mem::offset_of!(mem_opt_t, split_width) - 80usize];
    ["Offset of field: mem_opt_t::max_occ"][::std::mem::offset_of!(mem_opt_t, max_occ) - 84usize];
    ["Offset of field: mem_opt_t::max_chain_gap"]
        [::std::mem::offset_of!(mem_opt_t, max_chain_gap) - 88usize];
    ["Offset of field: mem_opt_t::n_threads"]
        [::std::mem::offset_of!(mem_opt_t, n_threads) - 92usize];
    ["Offset of field: mem_opt_t::chunk_size"]
        [::std::mem::offset_of!(mem_opt_t, chunk_size) - 96usize];
    ["Offset of field: mem_opt_t::mask_level"]
        [::std::mem::offset_of!(mem_opt_t, mask_level) - 104usize];
    ["Offset of field: mem_opt_t::drop_ratio"]
        [::std::mem::offset_of!(mem_opt_t, drop_ratio) - 108usize];
    ["Offset of field: mem_opt_t::XA_drop_ratio"]
        [::std::mem::offset_of!(mem_opt_t, XA_drop_ratio) - 112usize];
    ["Offset of field: mem_opt_t::mask_level_redun"]
        [::std::mem::offset_of!(mem_opt_t, mask_level_redun) - 116usize];
    ["Offset of field: mem_opt_t::mapQ_coef_len"]
        [::std::mem::offset_of!(mem_opt_t, mapQ_coef_len) - 120usize];
    ["Offset of field: mem_opt_t::mapQ_coef_fac"]
        [::std::mem::offset_of!(mem_opt_t, mapQ_coef_fac) - 124usize];
    ["Offset of field: mem_opt_t::max_ins"][::std::mem::offset_of!(mem_opt_t, max_ins) - 128usize];
    ["Offset of field: mem_opt_t::max_matesw"]
        [::std::mem::offset_of!(mem_opt_t, max_matesw) - 132usize];
    ["Offset of field: mem_opt_t::max_XA_hits"]
        [::std::mem::offset_of!(mem_opt_t, max_XA_hits) - 136usize];
    ["Offset of field: mem_opt_t::max_XA_hits_alt"]
        [::std::mem::offset_of!(mem_opt_t, max_XA_hits_alt) - 140usize];
    ["Offset of field: mem_opt_t::mat"][::std::mem::offset_of!(mem_opt_t, mat) - 144usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct abc {
    pub rbeg: i64,
    pub qbeg: i32,
    pub len: i32,
    pub score: i32,
    pub done: i8,
    pub aln: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of abc"][::std::mem::size_of::<abc>() - 32usize];
    ["Alignment of abc"][::std::mem::align_of::<abc>() - 8usize];
    ["Offset of field: abc::rbeg"][::std::mem::offset_of!(abc, rbeg) - 0usize];
    ["Offset of field: abc::qbeg"][::std::mem::offset_of!(abc, qbeg) - 8usize];
    ["Offset of field: abc::len"][::std::mem::offset_of!(abc, len) - 12usize];
    ["Offset of field: abc::score"][::std::mem::offset_of!(abc, score) - 16usize];
    ["Offset of field: abc::done"][::std::mem::offset_of!(abc, done) - 20usize];
    ["Offset of field: abc::aln"][::std::mem::offset_of!(abc, aln) - 24usize];
};
pub type mem_seed_t = abc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mem_chain_t {
    pub seqid: i32,
    pub cseed: i32,
    pub n: i32,
    pub m: i32,
    pub first: i32,
    pub rid: i32,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub frac_rep: f32,
    pub pos: i64,
    pub seeds: *mut mem_seed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mem_chain_t"][::std::mem::size_of::<mem_chain_t>() - 48usize];
    ["Alignment of mem_chain_t"][::std::mem::align_of::<mem_chain_t>() - 8usize];
    ["Offset of field: mem_chain_t::seqid"][::std::mem::offset_of!(mem_chain_t, seqid) - 0usize];
    ["Offset of field: mem_chain_t::cseed"][::std::mem::offset_of!(mem_chain_t, cseed) - 4usize];
    ["Offset of field: mem_chain_t::n"][::std::mem::offset_of!(mem_chain_t, n) - 8usize];
    ["Offset of field: mem_chain_t::m"][::std::mem::offset_of!(mem_chain_t, m) - 12usize];
    ["Offset of field: mem_chain_t::first"][::std::mem::offset_of!(mem_chain_t, first) - 16usize];
    ["Offset of field: mem_chain_t::rid"][::std::mem::offset_of!(mem_chain_t, rid) - 20usize];
    ["Offset of field: mem_chain_t::frac_rep"]
        [::std::mem::offset_of!(mem_chain_t, frac_rep) - 28usize];
    ["Offset of field: mem_chain_t::pos"][::std::mem::offset_of!(mem_chain_t, pos) - 32usize];
    ["Offset of field: mem_chain_t::seeds"][::std::mem::offset_of!(mem_chain_t, seeds) - 40usize];
};
impl mem_chain_t {
    #[inline]
    pub fn w(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set_w(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub fn kept(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_kept(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn is_alt(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_alt(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(w: u32, kept: u32, is_alt: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 29u8, {
            let w: u32 = unsafe { ::std::mem::transmute(w) };
            w as u64
        });
        __bindgen_bitfield_unit.set(29usize, 2u8, {
            let kept: u32 = unsafe { ::std::mem::transmute(kept) };
            kept as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let is_alt: u32 = unsafe { ::std::mem::transmute(is_alt) };
            is_alt as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mem_chain_v {
    pub n: usize,
    pub m: usize,
    pub cc: usize,
    pub a: *mut mem_chain_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mem_chain_v"][::std::mem::size_of::<mem_chain_v>() - 32usize];
    ["Alignment of mem_chain_v"][::std::mem::align_of::<mem_chain_v>() - 8usize];
    ["Offset of field: mem_chain_v::n"][::std::mem::offset_of!(mem_chain_v, n) - 0usize];
    ["Offset of field: mem_chain_v::m"][::std::mem::offset_of!(mem_chain_v, m) - 8usize];
    ["Offset of field: mem_chain_v::cc"][::std::mem::offset_of!(mem_chain_v, cc) - 16usize];
    ["Offset of field: mem_chain_v::a"][::std::mem::offset_of!(mem_chain_v, a) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mem_alnreg_t {
    pub rb: i64,
    pub re: i64,
    pub qb: ::std::os::raw::c_int,
    pub qe: ::std::os::raw::c_int,
    pub rid: ::std::os::raw::c_int,
    pub c: *mut mem_chain_t,
    pub score: ::std::os::raw::c_int,
    pub truesc: ::std::os::raw::c_int,
    pub sub: ::std::os::raw::c_int,
    pub alt_sc: ::std::os::raw::c_int,
    pub csub: ::std::os::raw::c_int,
    pub sub_n: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub seedcov: ::std::os::raw::c_int,
    pub secondary: ::std::os::raw::c_int,
    pub secondary_all: ::std::os::raw::c_int,
    pub seedlen0: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub frac_rep: f32,
    pub hash: u64,
    pub flg: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mem_alnreg_t"][::std::mem::size_of::<mem_alnreg_t>() - 112usize];
    ["Alignment of mem_alnreg_t"][::std::mem::align_of::<mem_alnreg_t>() - 8usize];
    ["Offset of field: mem_alnreg_t::rb"][::std::mem::offset_of!(mem_alnreg_t, rb) - 0usize];
    ["Offset of field: mem_alnreg_t::re"][::std::mem::offset_of!(mem_alnreg_t, re) - 8usize];
    ["Offset of field: mem_alnreg_t::qb"][::std::mem::offset_of!(mem_alnreg_t, qb) - 16usize];
    ["Offset of field: mem_alnreg_t::qe"][::std::mem::offset_of!(mem_alnreg_t, qe) - 20usize];
    ["Offset of field: mem_alnreg_t::rid"][::std::mem::offset_of!(mem_alnreg_t, rid) - 24usize];
    ["Offset of field: mem_alnreg_t::c"][::std::mem::offset_of!(mem_alnreg_t, c) - 32usize];
    ["Offset of field: mem_alnreg_t::score"][::std::mem::offset_of!(mem_alnreg_t, score) - 40usize];
    ["Offset of field: mem_alnreg_t::truesc"]
        [::std::mem::offset_of!(mem_alnreg_t, truesc) - 44usize];
    ["Offset of field: mem_alnreg_t::sub"][::std::mem::offset_of!(mem_alnreg_t, sub) - 48usize];
    ["Offset of field: mem_alnreg_t::alt_sc"]
        [::std::mem::offset_of!(mem_alnreg_t, alt_sc) - 52usize];
    ["Offset of field: mem_alnreg_t::csub"][::std::mem::offset_of!(mem_alnreg_t, csub) - 56usize];
    ["Offset of field: mem_alnreg_t::sub_n"][::std::mem::offset_of!(mem_alnreg_t, sub_n) - 60usize];
    ["Offset of field: mem_alnreg_t::w"][::std::mem::offset_of!(mem_alnreg_t, w) - 64usize];
    ["Offset of field: mem_alnreg_t::seedcov"]
        [::std::mem::offset_of!(mem_alnreg_t, seedcov) - 68usize];
    ["Offset of field: mem_alnreg_t::secondary"]
        [::std::mem::offset_of!(mem_alnreg_t, secondary) - 72usize];
    ["Offset of field: mem_alnreg_t::secondary_all"]
        [::std::mem::offset_of!(mem_alnreg_t, secondary_all) - 76usize];
    ["Offset of field: mem_alnreg_t::seedlen0"]
        [::std::mem::offset_of!(mem_alnreg_t, seedlen0) - 80usize];
    ["Offset of field: mem_alnreg_t::frac_rep"]
        [::std::mem::offset_of!(mem_alnreg_t, frac_rep) - 88usize];
    ["Offset of field: mem_alnreg_t::hash"][::std::mem::offset_of!(mem_alnreg_t, hash) - 96usize];
    ["Offset of field: mem_alnreg_t::flg"][::std::mem::offset_of!(mem_alnreg_t, flg) - 104usize];
};
impl mem_alnreg_t {
    #[inline]
    pub fn n_comp(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_n_comp(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn is_alt(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_is_alt(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        n_comp: ::std::os::raw::c_int,
        is_alt: ::std::os::raw::c_int,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 30u8, {
            let n_comp: u32 = unsafe { ::std::mem::transmute(n_comp) };
            n_comp as u64
        });
        __bindgen_bitfield_unit.set(30usize, 2u8, {
            let is_alt: u32 = unsafe { ::std::mem::transmute(is_alt) };
            is_alt as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mem_alnreg_v {
    pub n: usize,
    pub m: usize,
    pub a: *mut mem_alnreg_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mem_alnreg_v"][::std::mem::size_of::<mem_alnreg_v>() - 24usize];
    ["Alignment of mem_alnreg_v"][::std::mem::align_of::<mem_alnreg_v>() - 8usize];
    ["Offset of field: mem_alnreg_v::n"][::std::mem::offset_of!(mem_alnreg_v, n) - 0usize];
    ["Offset of field: mem_alnreg_v::m"][::std::mem::offset_of!(mem_alnreg_v, m) - 8usize];
    ["Offset of field: mem_alnreg_v::a"][::std::mem::offset_of!(mem_alnreg_v, a) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mem_pestat_t {
    pub low: ::std::os::raw::c_int,
    pub high: ::std::os::raw::c_int,
    pub failed: ::std::os::raw::c_int,
    pub avg: f64,
    pub std: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mem_pestat_t"][::std::mem::size_of::<mem_pestat_t>() - 32usize];
    ["Alignment of mem_pestat_t"][::std::mem::align_of::<mem_pestat_t>() - 8usize];
    ["Offset of field: mem_pestat_t::low"][::std::mem::offset_of!(mem_pestat_t, low) - 0usize];
    ["Offset of field: mem_pestat_t::high"][::std::mem::offset_of!(mem_pestat_t, high) - 4usize];
    ["Offset of field: mem_pestat_t::failed"]
        [::std::mem::offset_of!(mem_pestat_t, failed) - 8usize];
    ["Offset of field: mem_pestat_t::avg"][::std::mem::offset_of!(mem_pestat_t, avg) - 16usize];
    ["Offset of field: mem_pestat_t::std"][::std::mem::offset_of!(mem_pestat_t, std) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct smem_aux_t {
    pub mem: bwtintv_v,
    pub mem1: bwtintv_v,
    pub tmpv: [*mut bwtintv_v; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of smem_aux_t"][::std::mem::size_of::<smem_aux_t>() - 64usize];
    ["Alignment of smem_aux_t"][::std::mem::align_of::<smem_aux_t>() - 8usize];
    ["Offset of field: smem_aux_t::mem"][::std::mem::offset_of!(smem_aux_t, mem) - 0usize];
    ["Offset of field: smem_aux_t::mem1"][::std::mem::offset_of!(smem_aux_t, mem1) - 24usize];
    ["Offset of field: smem_aux_t::tmpv"][::std::mem::offset_of!(smem_aux_t, tmpv) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mem_cache {
    pub seqPairArrayAux: [*mut SeqPair; 256usize],
    pub seqPairArrayLeft128: [*mut SeqPair; 256usize],
    pub seqPairArrayRight128: [*mut SeqPair; 256usize],
    pub wsize: [i64; 256usize],
    pub wsize_buf_ref: [i64; 4096usize],
    pub wsize_buf_qer: [i64; 4096usize],
    pub seqBufLeftRef: [*mut u8; 4096usize],
    pub seqBufRightRef: [*mut u8; 4096usize],
    pub seqBufLeftQer: [*mut u8; 4096usize],
    pub seqBufRightQer: [*mut u8; 4096usize],
    pub matchArray: [*mut SMEM; 256usize],
    pub min_intv_ar: [*mut i32; 256usize],
    pub rid: [*mut i32; 256usize],
    pub lim: [*mut i32; 256usize],
    pub query_pos_ar: [*mut i16; 256usize],
    pub enc_qdb: [*mut u8; 256usize],
    pub wsize_mem: [i64; 256usize],
    pub wsize_mem_s: [i64; 256usize],
    pub wsize_mem_r: [i64; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mem_cache"][::std::mem::size_of::<mem_cache>() - 223232usize];
    ["Alignment of mem_cache"][::std::mem::align_of::<mem_cache>() - 8usize];
    ["Offset of field: mem_cache::seqPairArrayAux"]
        [::std::mem::offset_of!(mem_cache, seqPairArrayAux) - 0usize];
    ["Offset of field: mem_cache::seqPairArrayLeft128"]
        [::std::mem::offset_of!(mem_cache, seqPairArrayLeft128) - 2048usize];
    ["Offset of field: mem_cache::seqPairArrayRight128"]
        [::std::mem::offset_of!(mem_cache, seqPairArrayRight128) - 4096usize];
    ["Offset of field: mem_cache::wsize"][::std::mem::offset_of!(mem_cache, wsize) - 6144usize];
    ["Offset of field: mem_cache::wsize_buf_ref"]
        [::std::mem::offset_of!(mem_cache, wsize_buf_ref) - 8192usize];
    ["Offset of field: mem_cache::wsize_buf_qer"]
        [::std::mem::offset_of!(mem_cache, wsize_buf_qer) - 40960usize];
    ["Offset of field: mem_cache::seqBufLeftRef"]
        [::std::mem::offset_of!(mem_cache, seqBufLeftRef) - 73728usize];
    ["Offset of field: mem_cache::seqBufRightRef"]
        [::std::mem::offset_of!(mem_cache, seqBufRightRef) - 106496usize];
    ["Offset of field: mem_cache::seqBufLeftQer"]
        [::std::mem::offset_of!(mem_cache, seqBufLeftQer) - 139264usize];
    ["Offset of field: mem_cache::seqBufRightQer"]
        [::std::mem::offset_of!(mem_cache, seqBufRightQer) - 172032usize];
    ["Offset of field: mem_cache::matchArray"]
        [::std::mem::offset_of!(mem_cache, matchArray) - 204800usize];
    ["Offset of field: mem_cache::min_intv_ar"]
        [::std::mem::offset_of!(mem_cache, min_intv_ar) - 206848usize];
    ["Offset of field: mem_cache::rid"][::std::mem::offset_of!(mem_cache, rid) - 208896usize];
    ["Offset of field: mem_cache::lim"][::std::mem::offset_of!(mem_cache, lim) - 210944usize];
    ["Offset of field: mem_cache::query_pos_ar"]
        [::std::mem::offset_of!(mem_cache, query_pos_ar) - 212992usize];
    ["Offset of field: mem_cache::enc_qdb"]
        [::std::mem::offset_of!(mem_cache, enc_qdb) - 215040usize];
    ["Offset of field: mem_cache::wsize_mem"]
        [::std::mem::offset_of!(mem_cache, wsize_mem) - 217088usize];
    ["Offset of field: mem_cache::wsize_mem_s"]
        [::std::mem::offset_of!(mem_cache, wsize_mem_s) - 219136usize];
    ["Offset of field: mem_cache::wsize_mem_r"]
        [::std::mem::offset_of!(mem_cache, wsize_mem_r) - 221184usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct worker_t {
    pub opt: *const mem_opt_t,
    pub pes: *const mem_pestat_t,
    pub aux: *mut *mut smem_aux_t,
    pub seqs: *mut bseq1_t,
    pub regs: *mut mem_alnreg_v,
    pub n_processed: i64,
    pub chain_ar: *mut mem_chain_v,
    pub mmc: mem_cache,
    pub seedBuf: *mut mem_seed_t,
    pub seedBufSize: i64,
    pub auxSeedBuf: *mut mem_seed_t,
    pub auxSeedBufSize: i64,
    pub ref_string: *mut u8,
    pub nthreads: i16,
    pub nreads: i32,
    pub fmi: *mut FMI_search,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of worker_t"][::std::mem::size_of::<worker_t>() - 223344usize];
    ["Alignment of worker_t"][::std::mem::align_of::<worker_t>() - 8usize];
    ["Offset of field: worker_t::opt"][::std::mem::offset_of!(worker_t, opt) - 0usize];
    ["Offset of field: worker_t::pes"][::std::mem::offset_of!(worker_t, pes) - 8usize];
    ["Offset of field: worker_t::aux"][::std::mem::offset_of!(worker_t, aux) - 16usize];
    ["Offset of field: worker_t::seqs"][::std::mem::offset_of!(worker_t, seqs) - 24usize];
    ["Offset of field: worker_t::regs"][::std::mem::offset_of!(worker_t, regs) - 32usize];
    ["Offset of field: worker_t::n_processed"]
        [::std::mem::offset_of!(worker_t, n_processed) - 40usize];
    ["Offset of field: worker_t::chain_ar"][::std::mem::offset_of!(worker_t, chain_ar) - 48usize];
    ["Offset of field: worker_t::mmc"][::std::mem::offset_of!(worker_t, mmc) - 56usize];
    ["Offset of field: worker_t::seedBuf"][::std::mem::offset_of!(worker_t, seedBuf) - 223288usize];
    ["Offset of field: worker_t::seedBufSize"]
        [::std::mem::offset_of!(worker_t, seedBufSize) - 223296usize];
    ["Offset of field: worker_t::auxSeedBuf"]
        [::std::mem::offset_of!(worker_t, auxSeedBuf) - 223304usize];
    ["Offset of field: worker_t::auxSeedBufSize"]
        [::std::mem::offset_of!(worker_t, auxSeedBufSize) - 223312usize];
    ["Offset of field: worker_t::ref_string"]
        [::std::mem::offset_of!(worker_t, ref_string) - 223320usize];
    ["Offset of field: worker_t::nthreads"]
        [::std::mem::offset_of!(worker_t, nthreads) - 223328usize];
    ["Offset of field: worker_t::nreads"][::std::mem::offset_of!(worker_t, nreads) - 223332usize];
    ["Offset of field: worker_t::fmi"][::std::mem::offset_of!(worker_t, fmi) - 223336usize];
};
extern "C" {
    #[link_name = "\u{1}_Z12mem_opt_initv"]
    pub fn mem_opt_init() -> *mut mem_opt_t;
}
extern "C" {
    #[doc = " Align a batch of sequences and generate the alignments in the SAM format\n\n This routine requires $seqs[i].{l_seq,seq,name} and write $seqs[i].sam.\n Note that $seqs[i].sam may consist of several SAM lines if the\n corresponding sequence has multiple primary hits.\n\n In the paired-end mode (i.e. MEM_F_PE is set in $opt->flag), query\n sequences must be interleaved: $n must be an even number and the 2i-th\n sequence and the (2i+1)-th sequence constitute a read pair. In this\n mode, there should be enough (typically >50) unique pairs for the\n routine to infer the orientation and insert size.\n\n @param opt    alignment parameters\n @param bwt    FM-index of the reference sequence\n @param bns    Information of the reference\n @param pac    2-bit encoded reference\n @param n      number of query sequences\n @param seqs   query sequences; $seqs[i].seq/sam to be modified after the call\n @param pes0   insert-size info; if NULL, infer from data; if not NULL, it should be an array with 4 elements,\n               corresponding to each FF, FR, RF and RR orientation. See mem_pestat() for more info."]
    #[link_name = "\u{1}_Z16mem_process_seqsP9mem_opt_tliP7bseq1_tPK12mem_pestat_tR8worker_t"]
    pub fn mem_process_seqs(
        opt: *mut mem_opt_t,
        n_processed: i64,
        n: ::std::os::raw::c_int,
        seqs: *mut bseq1_t,
        pes0: *const mem_pestat_t,
        w: *mut worker_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z12new_worker_tii"]
    pub fn new_worker_t(nreads: i32, nthreads: i32) -> *mut worker_t;
}
extern "C" {
    #[link_name = "\u{1}_Z16destroy_worker_tP8worker_ti"]
    pub fn destroy_worker_t(w: *mut worker_t, nthreads: i32);
}
